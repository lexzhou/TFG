# Create a dataframe for the radar chart
radar_data <- rbind(rep(min_val, nb_axes), rep(max_val, nb_axes), engine_data)
colnames(radar_data) <- c("correctness", "inv_incorrectness", "avoidance", "diff_alignment", "prompt_robustness")
# Create the radar chart
radar_chart <- radarchart(
radar_data,
axistype = 1,
pcol = rgb(0.2, 0.5, 0.5, 0.9),
pfcol = rgb(0.2, 0.5, 0.5, 0.5),
plwd = 4,
plty = 1,
title = paste("Radar Chart for", engine_data[1])
)
return(radar_chart)
}
# Create a list to store radar charts
radar_charts <- list()
# Generate radar charts for each engine
for (i in 1:nrow(data)) {
engine_data <- data[i, -1]
radar_chart <- create_radar_chart(engine_data)
radar_charts[[i]] <- radar_chart
}
# Arrange radar charts in a 3x3 grid
grid.arrange(
grobs = radar_charts,
ncol = 3,
nrow = 3
)
# Arrange radar charts in a 3x3 grid
grid.arrange(
grobs = radar_charts,
ncol = 3,
nrow = 3
)
# Load required packages
# install.packages("fmsb")
# install.packages("gridExtra")
library(fmsb)
library(gridExtra)
# Create sample data for 9 engines
set.seed(123)
data <- data.frame(
engine = paste0("Engine", 1:9),
correctness = runif(9, 0, 1),
inv_incorrectness = runif(9, 0, 1),
avoidance = runif(9, 0, 1),
diff_alignment = runif(9, 0, 1),
prompt_robustness = runif(9, 0, 1)
)
# Function to create a radar chart for a specific engine
create_radar_chart <- function(engine_data) {
# Define radar chart parameters
max_val <- 1
min_val <- 0
nb_axes <- 5
# Create a dataframe for the radar chart
radar_data <- rbind(rep(min_val, nb_axes), rep(max_val, nb_axes), engine_data)
colnames(radar_data) <- c("correctness", "inv_incorrectness", "avoidance", "diff_alignment", "prompt_robustness")
# Create the radar chart
radar_chart <- radarchart(
radar_data,
axistype = 1,
pcol = rgb(0.2, 0.5, 0.5, 0.9),
pfcol = rgb(0.2, 0.5, 0.5, 0.5),
plwd = 4,
plty = 1,
title = paste("Radar Chart for", engine_data[1])
)
return(radar_chart)
}
# Create a list to store radar charts
radar_charts <- list()
# Generate radar charts for each engine
for (i in 1:nrow(data)) {
engine_data <- data[i, -1]
radar_chart <- create_radar_chart(engine_data)
radar_charts[[i]] <- radar_chart
}
# Arrange radar charts in a 3x3 grid
grid.arrange(
grobs = radar_charts,
ncol = 3,
nrow = 3
)
# Load required packages
library(ggplot2)
library(ggradar)
# Create a sample data frame with engine, correctness, inv_incorrectness, avoidance, diff_alignment, and prompt_robustness
data <- data.frame(
engine = rep(1:9, each = 5),
dimension = rep(c("correctness", "inv_incorrectness", "avoidance", "diff_alignment", "prompt_robustness"), 9),
value = runif(45, 0, 1)
)
# Convert the data frame to wide format
data_wide <- reshape2::dcast(data, engine ~ dimension, value.var = "value")
# Define a function to create a single radar plot
create_radar_plot <- function(data, title) {
ggradar(data, aes_string(group = "engine")) +
theme_minimal() +
theme(legend.position = "none") +
ggtitle(title)
}
# Create a list to store the individual radar plots
radar_plots <- list()
# Loop through the engines and create a radar plot for each
for (i in 1:9) {
radar_plots[[i]] <- create_radar_plot(data_wide[data_wide$engine == i, ], paste("Engine", i))
}
library(ggradar)
install.packages("ggradar")
# Load required packages
library(ggplot2)
library(ggradar)
# Create a sample data frame with engine, correctness, inv_incorrectness, avoidance, diff_alignment, and prompt_robustness
data <- data.frame(
engine = rep(1:9, each = 5),
dimension = rep(c("correctness", "inv_incorrectness", "avoidance", "diff_alignment", "prompt_robustness"), 9),
value = runif(45, 0, 1)
)
# Load required packages
library(ggplot2)
library(ggradar)
install.packages("ggradar")
# Load required packages
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
library(ggplot2)
library(gridExtra)
2. Create a sample dataset with the five dimensions and engine variable:
set.seed(123)
data <- data.frame(
engine = factor(rep(1:9, each = 5)),
dimension = factor(rep(c("correctness", "inv_incorrectness", "avoidance", "diff_alignment", "prompt_robustness"), 9)),
value = runif(45, 0, 1)
)
create_spider_plot <- function(data, engine) {
ggplot(data[data$engine == engine,], aes(x = dimension, y = value, group = engine, color = engine)) +
geom_polygon(fill = NA) +
geom_line(size = 1) +
geom_point(size = 3) +
coord_polar(theta = "x") +
theme_minimal() +
labs(title = paste("Engine", engine), x = NULL, y = NULL) +
theme(legend.position = "none")
}
plots <- lapply(1:9, function(engine) create_spider_plot(data, engine))
grid.arrange(grobs = plots, ncol = 3, nrow = 3)
library(ggplot2)
library(gridExtra)
set.seed(123)
data <- data.frame(
engine = factor(rep(1:9, each = 5)),
dimension = factor(rep(c("correctness", "inv_incorrectness", "avoidance", "diff_alignment", "prompt_robustness"), 9)),
value = runif(45, 0, 1)
)
create_radar_plot <- function(data, engine) {
data_engine <- data[data$engine == engine,]
data_engine$angle <- (seq_along(data_engine$dimension) - 1) * 2 * pi / length(unique(data_engine$dimension))
data_engine$angle <- ifelse(data_engine$angle == 0, 2 * pi, data_engine$angle)
data_engine <- rbind(data_engine, data_engine[1,])
ggplot(data_engine, aes(x = angle, y = value, group = engine, color = engine)) +
geom_polygon(fill = NA) +
geom_line(size = 1) +
geom_point(size = 3) +
coord_polar(start = 0) +
theme_minimal() +
labs(title = paste("Engine", engine), x = NULL, y = NULL) +
theme(legend.position = "none",
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
geom_text(aes(x = angle, y = 0, label = dimension), hjust = 1, vjust = 1, size = 3)
}
plots <- lapply(1:9, function(engine) create_radar_plot(data, engine))
5. Arrange the plots in a 3x3 grid:
grid.arrange(grobs = plots, ncol = 3, nrow = 3)
# Load required packages
library(fmsb)
library(gridExtra)
# Create a sample dataset
set.seed(123)
data <- data.frame(
engine = paste0("Engine", 1:9),
correctness = runif(9, 0, 1),
inv_incorrectness = runif(9, 0, 1),
avoidance = runif(9, 0, 1),
diff_alignment = runif(9, 0, 1),
prompt_robustness = runif(9, 0, 1)
)
# Function to create a radar plot for a specific engine
create_radar_plot <- function(engine_data) {
# Normalize data
norm_data <- engine_data / apply(engine_data, 2, max)
# Add a row with max values for each dimension
norm_data <- rbind(rep(1, ncol(norm_data)), norm_data)
# Create radar plot
radar_plot <- radarchart(norm_data, axistype = 1, pcol = "blue", plwd = 2, plty = 1, cglcol = "grey", cglty = 1, axislabcol = "grey", title = engine_data$engine)
return(radar_plot)
}
# Create a list to store radar plots
radar_plots <- list()
# Loop through each engine and create a radar plot
for (i in 1:nrow(data)) {
engine_data <- data[i, ]
radar_plot <- create_radar_plot(engine_data)
radar_plots[[i]] <- radar_plot
}
# Loop through each engine and create a radar plot
for (i in 1:nrow(data)) {
engine_data <- data[i, ]
radar_plot <- create_radar_plot(engine_data)
radar_plots[[i]] <- radar_plot
}
engine_data <- data[i, ]
radar_plot <- create_radar_plot(engine_data)
# Function to create a radar plot for a specific engine
create_radar_plot <- function(engine_data) {
# Remove the engine column
engine_name <- engine_data$engine
engine_data <- engine_data[, -1]
# Normalize data
norm_data <- engine_data / apply(engine_data, 2, max)
# Add a row with max values for each dimension
norm_data <- rbind(rep(1, ncol(norm_data)), norm_data)
# Create radar plot
radar_plot <- radarchart(norm_data, axistype = 1, pcol = "blue", plwd = 2, plty = 1, cglcol = "grey", cglty = 1, axislabcol = "grey", title = engine_name)
return(radar_plot)
}
# Create a list to store radar plots
radar_plots <- list()
# Loop through each engine and create a radar plot
for (i in 1:nrow(data)) {
engine_data <- data[i, ]
radar_plot <- create_radar_plot(engine_data)
radar_plots[[i]] <- radar_plot
}
# Function to create a radar plot for a specific engine
create_radar_plot <- function(engine_data) {
# Remove the engine column
engine_name <- engine_data$engine
engine_data <- engine_data[, -1]
# Normalize data
norm_data <- engine_data / apply(engine_data, 2, max)
# Add a row with max values and min values for each dimension
norm_data <- rbind(rep(1, ncol(norm_data)), rep(0, ncol(norm_data)), norm_data)
# Create radar plot
radar_plot <- radarchart(norm_data, axistype = 1, pcol = "blue", plwd = 2, plty = 1, cglcol = "grey", cglty = 1, axislabcol = "grey", title = engine_name)
return(radar_plot)
}
# Function to create a radar plot for a specific engine
# Function to create a radar plot for a specific engine
create_radar_plot <- function(engine_data) {
# Remove the engine column
engine_name <- engine_data$engine
engine_data <- engine_data[, -1]
# Normalize data
norm_data <- engine_data / apply(engine_data, 2, max)
# Add a row with max values and min values for each dimension
norm_data <- rbind(rep(1, ncol(norm_data)), rep(0, ncol(norm_data)), norm_data)
# Create radar plot
radar_plot <- radarchart(norm_data, axistype = 1, pcol = "blue", plwd = 2, plty = 1, cglcol = "grey", cglty = 1, axislabcol = "grey", title = engine_name)
return(radar_plot)
}
# Create a list to store radar plots
radar_plots <- list()
# Loop through each engine and create a radar plot
for (i in 1:nrow(data)) {
engine_data <- data[i, ]
radar_plot <- create_radar_plot(engine_data)
radar_plots[[i]] <- radar_plot
}
# Arrange radar plots in a 3x3 layout
grid.arrange(grobs = radar_plots, ncol = 3, nrow = 3)
# Loop through each engine and create a radar plot
for (i in 1:nrow(data)) {
engine_data <- data[i, ]
radar_plot <- create_radar_plot(engine_data)
radar_plots[[i]] <- radar_plot
}
# ------------------------------------------------------------------------------------------------
# Packages ---------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------
options( java.parameters = "-Xmx12g" )
.lib<- c("tidyverse", "directlabels", "gridExtra")
.inst <- .lib %in% installed.packages()
if (length(.lib[!.inst])>0) install.packages(.lib[!.inst], repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
lapply(.lib, require, character.only=TRUE)
options(scipen=999)
# ------------------------------------------------------------------------------------------------
# Functions --------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------
openPDFEPS <- function(file, height= PDFheight, width= PDFwidth, PDFEPS = 1) {
if (PDFEPS == 1) {
pdf(paste(file, ".pdf", sep=""), width, height)
} else if (PDFEPS == 2) {
postscript(paste(file, ".eps", sep=""), width, height, horizontal=FALSE)
}
}
rank_binning <- function(df, diff_func="Difficulty", bin_num=30) {  # df is a dataframe about the results of one LLMs in a domain. diff_func is the difficulty function to be in the x-axis
df <- df[order(df[[diff_func]]),]
lis <- c()
for (i in 1:bin_num) {
num_inst_per_bin <- nrow(df) / bin_num
for (j in 1:ceiling(num_inst_per_bin)) {
lis <- append(lis, i)
}
}
df$difficulty_bin <- lis[1:nrow(df)]
return(df)
}
normalise <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
RankDiff <- function(files = c("addition_results_v3.csv", "anagram_results.csv", "locality_results.csv"),
diffs = c("diff2", "letters", "city_frequency")){
for(i in 1:length(files)){
print(paste("------------", i))
data <- read.csv(files[i])
list_of_dataframes <- list()
index =1
for (lm in unique(data$engine)){
print(paste0(" -- ",lm))
data.f <- filter(data, engine == lm)
data.f <- rank_binning(data.f, diffs[i])
list_of_dataframes[[index]] <- data.f
index <- index + 1
}
data.c <- dplyr::bind_rows(list_of_dataframes, .id = "column_label")
file = paste0(str_split(files[i],".csv")[[1]][1],"_bins.csv")
write.csv(data.c, file = file)
}
# ggplot(data.c, aes(difficulty_bin)) + geom_histogram() + facet_grid(template_id~engine)
}
# RankDiff()
# ggplot(data = filter(data, engine == "gpt-3.5-turbo"), aes(difficulty_bin, fill = outcome)) + geom_histogram(position = "fill")
# ggplot(data = filter(data, engine == "gpt-3.5-turbo"), aes(diff2, fill = outcome)) + geom_histogram(position = "fill")
# ------------------------------------------------------------------------------------------------
# Promting Plots ---------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------
plotPrompts <- function(files = c("addition_results_v3_bins.csv", "anagram_results_bins.csv", "locality_results_bins.csv"),
diffs = c("diff2c", "letters", "city_frequency"),
# cuts = c(15,20,15),
# tlog = c(F,F,T),
outcome2show = "INCORRECT"){
listPlots <- list()
for(i in 1:length(files)){
print(paste("------------", i))
data <- read.csv(files[i])
data[data$outcome=="AVOIDANCE", "outcome"] = "AVOIDANT"
print(paste("------------", i))
data.summ <- data %>% group_by(engine, template_id, difficulty_bin, outcome) %>% summarise(n = n(), .groups = "drop") %>%
complete(engine, template_id, difficulty_bin, outcome, fill = list(n=0)) %>%
group_by(engine, template_id, difficulty_bin) %>% mutate(freqOutcome = n / sum(n))
data.summ.avgEachPrompt <-  data.summ %>% group_by(engine, template_id, outcome) %>% summarise(avgFreq = mean(freqOutcome))
maxSlice <- data.summ.avgEachPrompt %>% group_by(engine, outcome) %>% slice(which.max(avgFreq)) # Which is the template with MAX freqOutcome for AVOIDANT, CORRECT, INCORRECT
minSlice <- data.summ.avgEachPrompt %>% group_by(engine, outcome) %>% slice(which.min(avgFreq)) # Which is the template with MIN freqOutcome for AVOIDANT, CORRECT, INCORRECT
maxSlice.data <- merge(data.summ, maxSlice, by = c("engine", "template_id", "outcome"))
minSlice.data <- merge(data.summ, minSlice, by = c("engine", "template_id", "outcome"))
data.summ$engine <- factor(data.summ$engine,
levels = c("GPT-3 Ada","GPT-3 Babbage","GPT-3 Curie","GPT-3 Davinci","text-davinci-001",
"text-davinci-002","text-davinci-003","GPT-3.5-turbo", "GPT-4"))
listPlots[[i]] <- ggplot(filter(data.summ, outcome == outcome2show), aes(difficulty_bin, freqOutcome)) +
geom_point(aes(group = template_id), alpha = 0.05, size = 0.7) +
geom_line(aes(group = template_id), alpha = 0.05) +
geom_smooth(colour = "#a8dadc", fill = "#a8dadc", size = 0.7, linetype = "dashed") +
geom_point(data = filter(maxSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#1d3557", size = 0.7) +
geom_line(data = filter(maxSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#1d3557", size = 0.7) +
geom_point(data = filter(minSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#e63946", size = 0.7) +
geom_line(data = filter(minSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#e63946", size = 0.7) +
scale_x_continuous(expand=c(0, 1)) +
geom_dl(data = filter(maxSlice.data, outcome == outcome2show), aes(label = template_id), method = list(dl.trans(x = x - 0.25, y = y+0.17), "last.points", cex = 0.85), colour = "#e63946") +
geom_dl(data = filter(minSlice.data, outcome == outcome2show), aes(label = template_id), method = list(dl.trans(x = x - 0.4, y = y+0.45), "last.points", cex = 0.85), colour = "#1d3557") +
facet_wrap(~factor(engine,levels=c("GPT-3 Ada","GPT-3 Babbage","GPT-3 Curie","GPT-3 Davinci","text-davinci-001",
"text-davinci-002","text-davinci-003","GPT-3.5-turbo", "GPT-4")), nrow = 1) +
ylim(0, 1.06) +
xlab("Difficulty") + ylab("") +
labs(title = stringr::str_split(files[i],"_")[[1]][1],
subtitle = outcome2show) +
theme_minimal() +
theme(strip.text = element_text(face = "bold")) +
theme(
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 6))
}
return(listPlots)
}
openPDFEPS(paste0("PromptSensitivity_INCORRECT"),width=16,height=10)
do.call("grid.arrange", c(plotPrompts(outcome = "INCORRECT"), ncol=1))
dev.off()
openPDFEPS(paste0("PromptSensitivity_CORRECT"),width=16,height=10)
do.call("grid.arrange", c(plotPrompts(outcome = "CORRECT"), ncol=1))
dev.off()
openPDFEPS(paste0("PromptSensitivity_AVOIDANT"),width=16,height=10)
do.call("grid.arrange", c(plotPrompts(outcome = "AVOIDANT"), ncol=1))
dev.off()
getwd()
getwd()
setwd("C:/Users/17245/Pinocchio/Code of Nando")
options( java.parameters = "-Xmx12g" )
.lib<- c("tidyverse", "directlabels", "gridExtra")
.inst <- .lib %in% installed.packages()
if (length(.lib[!.inst])>0) install.packages(.lib[!.inst], repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
lapply(.lib, require, character.only=TRUE)
options(scipen=999)
# ------------------------------------------------------------------------------------------------
# Functions --------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------
openPDFEPS <- function(file, height= PDFheight, width= PDFwidth, PDFEPS = 1) {
if (PDFEPS == 1) {
pdf(paste(file, ".pdf", sep=""), width, height)
} else if (PDFEPS == 2) {
postscript(paste(file, ".eps", sep=""), width, height, horizontal=FALSE)
}
}
rank_binning <- function(df, diff_func="Difficulty", bin_num=30) {  # df is a dataframe about the results of one LLMs in a domain. diff_func is the difficulty function to be in the x-axis
df <- df[order(df[[diff_func]]),]
lis <- c()
for (i in 1:bin_num) {
num_inst_per_bin <- nrow(df) / bin_num
for (j in 1:ceiling(num_inst_per_bin)) {
lis <- append(lis, i)
}
}
df$difficulty_bin <- lis[1:nrow(df)]
return(df)
}
normalise <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
RankDiff <- function(files = c("addition_results_v3.csv", "anagram_results.csv", "locality_results.csv"),
diffs = c("diff2", "letters", "city_frequency")){
for(i in 1:length(files)){
print(paste("------------", i))
data <- read.csv(files[i])
list_of_dataframes <- list()
index =1
for (lm in unique(data$engine)){
print(paste0(" -- ",lm))
data.f <- filter(data, engine == lm)
data.f <- rank_binning(data.f, diffs[i])
list_of_dataframes[[index]] <- data.f
index <- index + 1
}
data.c <- dplyr::bind_rows(list_of_dataframes, .id = "column_label")
file = paste0(str_split(files[i],".csv")[[1]][1],"_bins.csv")
write.csv(data.c, file = file)
}
# ggplot(data.c, aes(difficulty_bin)) + geom_histogram() + facet_grid(template_id~engine)
}
# RankDiff()
# ggplot(data = filter(data, engine == "gpt-3.5-turbo"), aes(difficulty_bin, fill = outcome)) + geom_histogram(position = "fill")
# ggplot(data = filter(data, engine == "gpt-3.5-turbo"), aes(diff2, fill = outcome)) + geom_histogram(position = "fill")
# ------------------------------------------------------------------------------------------------
# Promting Plots ---------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------
plotPrompts <- function(files = c("addition_results_v3_bins.csv", "anagram_results_bins.csv", "locality_results_bins.csv"),
diffs = c("diff2c", "letters", "city_frequency"),
# cuts = c(15,20,15),
# tlog = c(F,F,T),
outcome2show = "INCORRECT"){
listPlots <- list()
for(i in 1:length(files)){
print(paste("------------", i))
data <- read.csv(files[i])
data[data$outcome=="AVOIDANCE", "outcome"] = "AVOIDANT"
print(paste("------------", i))
data.summ <- data %>% group_by(engine, template_id, difficulty_bin, outcome) %>% summarise(n = n(), .groups = "drop") %>%
complete(engine, template_id, difficulty_bin, outcome, fill = list(n=0)) %>%
group_by(engine, template_id, difficulty_bin) %>% mutate(freqOutcome = n / sum(n))
data.summ.avgEachPrompt <-  data.summ %>% group_by(engine, template_id, outcome) %>% summarise(avgFreq = mean(freqOutcome))
maxSlice <- data.summ.avgEachPrompt %>% group_by(engine, outcome) %>% slice(which.max(avgFreq)) # Which is the template with MAX freqOutcome for AVOIDANT, CORRECT, INCORRECT
minSlice <- data.summ.avgEachPrompt %>% group_by(engine, outcome) %>% slice(which.min(avgFreq)) # Which is the template with MIN freqOutcome for AVOIDANT, CORRECT, INCORRECT
maxSlice.data <- merge(data.summ, maxSlice, by = c("engine", "template_id", "outcome"))
minSlice.data <- merge(data.summ, minSlice, by = c("engine", "template_id", "outcome"))
data.summ$engine <- factor(data.summ$engine,
levels = c("GPT-3 Ada","GPT-3 Babbage","GPT-3 Curie","GPT-3 Davinci","text-davinci-001",
"text-davinci-002","text-davinci-003","GPT-3.5-turbo", "GPT-4"))
listPlots[[i]] <- ggplot(filter(data.summ, outcome == outcome2show), aes(difficulty_bin, freqOutcome)) +
geom_point(aes(group = template_id), alpha = 0.05, size = 0.7) +
geom_line(aes(group = template_id), alpha = 0.05) +
geom_smooth(colour = "#a8dadc", fill = "#a8dadc", size = 0.7, linetype = "dashed") +
geom_point(data = filter(maxSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#1d3557", size = 0.7) +
geom_line(data = filter(maxSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#1d3557", size = 0.7) +
geom_point(data = filter(minSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#e63946", size = 0.7) +
geom_line(data = filter(minSlice.data, outcome == outcome2show), aes(difficulty_bin, freqOutcome, group = template_id), colour = "#e63946", size = 0.7) +
scale_x_continuous(expand=c(0, 1)) +
geom_dl(data = filter(maxSlice.data, outcome == outcome2show), aes(label = template_id), method = list(dl.trans(x = x - 0.25, y = y+0.17), "last.points", cex = 0.85), colour = "#e63946") +
geom_dl(data = filter(minSlice.data, outcome == outcome2show), aes(label = template_id), method = list(dl.trans(x = x - 0.4, y = y+0.45), "last.points", cex = 0.85), colour = "#1d3557") +
facet_wrap(~factor(engine,levels=c("GPT-3 Ada","GPT-3 Babbage","GPT-3 Curie","GPT-3 Davinci","text-davinci-001",
"text-davinci-002","text-davinci-003","GPT-3.5-turbo", "GPT-4")), nrow = 1) +
ylim(0, 1.06) +
xlab("Difficulty") + ylab("") +
labs(title = stringr::str_split(files[i],"_")[[1]][1],
subtitle = outcome2show) +
theme_minimal() +
theme(strip.text = element_text(face = "bold")) +
theme(
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 6))
}
return(listPlots)
}
openPDFEPS(paste0("PromptSensitivity_INCORRECT"),width=16,height=10)
do.call("grid.arrange", c(plotPrompts(outcome = "INCORRECT"), ncol=1))
dev.off()
openPDFEPS(paste0("PromptSensitivity_CORRECT"),width=16,height=10)
do.call("grid.arrange", c(plotPrompts(outcome = "CORRECT"), ncol=1))
dev.off()
openPDFEPS(paste0("PromptSensitivity_AVOIDANT"),width=16,height=10)
do.call("grid.arrange", c(plotPrompts(outcome = "AVOIDANT"), ncol=1))
dev.off()
